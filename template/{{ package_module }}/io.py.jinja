import os
from dataclasses import dataclass
from pathlib import Path

import polars as pl

from {{package_module}}.settings import load_settings
from {{package_module}}.logger import logger
from {{package_module}}.util import print_info

#pl.Config(tbl_rows=500)
#pl.Config(fmt_str_lengths=500)

#{{package_module | upper}}_HOME = os.environ["{{package_module | upper}}_HOME"]
settings = load_settings()
{{package_module | upper}}_HOME = settings.{{package_module | upper}}_HOME
DATA_DIR = Path({{package_module | upper}}_HOME) / "data"


@dataclass
class NamedDataset:
    name: str
    filepath: Path | str

    def save(self, df: pl.DataFrame) -> None:
        logger.info(f"Saving {self.name} to {self.filepath}...")
        if str(self.filepath).endswith(".csv"):
            df.write_csv(self.filepath)
        elif str(self.filepath).endswith(".parquet"):
            df.write_parquet(self.filepath)
        else:
            raise ValueError(f"Unsupported file format: {self.filepath}")
        logger.info("Done.")

    def read(
        self, show_columns: bool = False, show_unique: bool = False, n: int | None = None
    ) -> pl.DataFrame:
        logger.info(f"Reading {self.name} from {self.filepath}...")
        if str(self.filepath).endswith(".csv"):
            df = pl.read_csv(self.filepath, n_rows=n)
        elif str(self.filepath).endswith(".parquet"):
            df = pl.read_parquet(self.filepath, n_rows=n)
        else:
            raise ValueError(f"Unsupported file format: {self.filepath}")
        print_info(df, show_columns=show_columns, show_unique=show_unique)
        logger.info("Done.")
        return df
