# ---- Project Info and Dependencies ----

[project.urls]
Repository = "https://github.com/{{ package_github_org }}/{{ package_name }}"
# Homepage = "https://..."

[project]
name = "{{ package_name }}"
description = "{{ package_description }}"
authors = [
    { name="{{ package_author_name }}", email="{{ package_author_email }}" },
]
readme = "README.md"
license = "MIT"
requires-python = ">=3.11,<4.0"
dynamic = ["version"]

dependencies = [
    "dynaconf>=3.2.10",
    "ipython>=9.0.1",
    "jupyter>=1.1.1",
    "loguru>=0.7.3",
    "polars[all,pandas]>=1.24.0",
    "python-on-whales>=0.75.1",
    "typeguard>=4.4.2",
    "typer>=0.15.2",
]

[dependency-groups]
dev = [
    "pytest>=8.3.5",
    "pytest-cov>=6.0.0",
    "ruff>=0.11.0",
    "mypy>=1.15.0",
    "codespell>=2.4.1",
    "rich>=13.9.4",
]

[project.scripts]
{{ package_name }} = "{{ package_module }}.cmd.root:main"


# ---- Build system ----

# Dynamic versioning from:
# https://github.com/ninoseki/uv-dynamic-versioning/

[build-system]
requires = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "uv-dynamic-versioning"
# Note JSON schemas don't seem to be right for tool.hatch.version.source so
# this may cause false warnings in IDEs.
# https://github.com/ninoseki/uv-dynamic-versioning/issues/21

[tool.uv-dynamic-versioning]
vcs = "git"
style = "pep440"
bump = "true"


# ---- Settings ----

[tool.ruff]
# Set as desired, typically 88 (black standard) or 100 (wide).
line-length = 100

[tool.ruff.lint]
# See: https://docs.astral.sh/ruff/rules/
select = [
    # Basic list from: https://docs.astral.sh/ruff/linter/#rule-selection
    "E", # https://docs.astral.sh/ruff/rules/#error-e
    "F", # https://docs.astral.sh/ruff/rules/#pyflakes-f
    "UP", # https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "B", # https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "I", # https://docs.astral.sh/ruff/rules/#isort-i
    # Other possibilities:
    # "D" # https://docs.astral.sh/ruff/rules/#pydocstyle-d
    # "Q" # https://docs.astral.sh/ruff/rules/#flake8-quotes-q
    # "COM" # https://docs.astral.sh/ruff/rules/#flake8-commas-com
    # "SIM", # https://docs.astral.sh/ruff/rules/#flake8-simplify-sim

]
ignore = [
    "E501", # https://docs.astral.sh/ruff/rules/line-too-long/
    "E402", # https://docs.astral.sh/ruff/rules/module-import-not-at-top-of-file/
    "E731", # https://docs.astral.sh/ruff/rules/lambda-assignment/
    # We use both ruff formatter and linter so some rules should always be disabled.
    # See: https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "W191", # https://docs.astral.sh/ruff/rules/tab-indentation/
    "E111", # https://docs.astral.sh/ruff/rules/indentation-with-invalid-multiple/
    "E114", # https://docs.astral.sh/ruff/rules/indentation-with-invalid-multiple-comment/
    "E117", # https://docs.astral.sh/ruff/rules/over-indented/
    "D206", # https://docs.astral.sh/ruff/rules/docstring-tab-indentation/
    "D300", # https://docs.astral.sh/ruff/rules/triple-single-quotes/
    "Q000", # https://docs.astral.sh/ruff/rules/bad-quotes-inline-string/
    "Q001", # https://docs.astral.sh/ruff/rules/bad-quotes-multiline-string/
    "Q002", # https://docs.astral.sh/ruff/rules/bad-quotes-docstring/
    "Q003", # https://docs.astral.sh/ruff/rules/avoidable-escaped-quote/
    "COM812", # https://docs.astral.sh/ruff/rules/missing-trailing-comma/
    "COM819", # https://docs.astral.sh/ruff/rules/prohibited-trailing-comma/
    "ISC002", # https://docs.astral.sh/ruff/rules/multi-line-implicit-string-concatenation/
]


[tool.mypy]
disable_error_code = [
    "import-untyped",
]

[tool.codespell]
# ignore-words-list = "foo,bar"
# skip = "foo.py,bar.py"

[tool.pytest.ini_options]
python_files = ["*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
norecursedirs = []
filterwarnings = [
    "ignore::DeprecationWarning"
]
addopts =[
    # do not capture any output---necessary for interactive breakpoints
    "-s",

    # report any tests that are skipped, xfailed, or xpassed
    "-rsxX",

    # report local variables with every stack trace
    "-l",

    # output verbosity
    # show individual test names
    "-vv",

    # calculate test coverage for the {{package_module}} module
    "--cov={{package_module}}",

    # add terminal coverage report
    "--cov-report=term-missing",

    # add html coverage report generation
    "--cov-report=html",

    # output short traceback
    "--tb=short",

    # exclude a few things from coverage
    # hate to pull in yet another config file, but this seems to be the only way to do it
    "--cov-config=.coveragerc",
]

testpaths =[
    "{{package_module}}/",
    "tests/",
]

# ok wait, do I not actually need a separate .coveragerc anymore?  big if true ig
[tool.coverage.run]
omit = ["*/migrations/*", "*/legacy_code/*", "*/third_party/*"]

[[tool.uv.index]]
name = "a29-pypi"
url = "https://pypi.alpha29.com/simple/"
publish-url = "https://pypi.alpha29.com/simple/"
